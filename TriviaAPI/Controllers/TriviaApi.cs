/*
 * OpenHack
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using TriviaAPI.Attributes;
using TriviaAPI.Models;
using Swashbuckle.AspNetCore.Annotations;

namespace TriviaAPI.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class TriviaApiController : Controller
    { 
        /// <summary>
        /// Get Trivia Leaderboard
        /// </summary>
        /// <remarks>Get the Team or User Leaderboard for the Trivia Contest</remarks>
        /// <param name="context">Tab context (from microsoftTeams.getContext() method)</param>
        /// <param name="type">Type of Leaderboard request (&#39;team&#39; or &#39;user&#39;)</param>
        /// <response code="200"></response>
        /// <response code="400">Invalid parameter value</response>
        [HttpPost]
        [Route("/api/trivia/leaderboard/{type}")]
        [ValidateModelState]
        [SwaggerOperation("TriviaGetLeaderboard")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LeaderboardModel>), description: "")]
        public virtual IActionResult TriviaGetLeaderboard([FromBody]TeamsContextModel context, [FromRoute][Required]string type)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<LeaderboardModel>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "[ {\r\n  \"score\" : 0,\r\n  \"achievementBadgeIcon\" : \"achievementBadgeIcon\",\r\n  \"name\" : \"name\",\r\n  \"id\" : \"00000000-0000-0000-0000-000000000000\",\r\n  \"achievementBadge\" : \"achievementBadge\"\r\n}, {\r\n  \"score\" : 0,\r\n  \"achievementBadgeIcon\" : \"achievementBadgeIcon\",\r\n  \"name\" : \"name\",\r\n  \"id\" : \"00000000-0000-0000-0000-000000000000\",\r\n  \"achievementBadge\" : \"achievementBadge\"\r\n} ]";
            exampleJson = "<null>\n  <id>00000000-0000-0000-0000-000000000000</id>\n  <name>aeiou</name>\n  <score>123</score>\n  <achievementBadge>aeiou</achievementBadge>\n  <achievementBadgeIcon>aeiou</achievementBadgeIcon>\n</null>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<LeaderboardModel>>(exampleJson)
            : default(List<LeaderboardModel>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Trivia Question
        /// </summary>
        /// <remarks>Get a trivia question for the specified user</remarks>
        /// <param name="user">Azure AD identifier for user</param>
        /// <response code="200"></response>
        /// <response code="400">Invalid parameter value</response>
        [HttpPost]
        [Route("/api/trivia/question")]
        [ValidateModelState]
        [SwaggerOperation("TriviaGetQuestion")]
        [SwaggerResponse(statusCode: 200, type: typeof(QuestionModel), description: "")]
        public virtual IActionResult TriviaGetQuestion([FromBody]QuestionRequesterModel user)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(QuestionModel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "{\r\n  \"questionOptions\" : [ {\r\n    \"id\" : 6,\r\n    \"text\" : \"text\"\r\n  }, {\r\n    \"id\" : 6,\r\n    \"text\" : \"text\"\r\n  } ],\r\n  \"id\" : 0,\r\n  \"text\" : \"text\"\r\n}";
            exampleJson = "<null>\n  <id>123</id>\n  <text>aeiou</text>\n</null>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<QuestionModel>(exampleJson)
            : default(QuestionModel);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Register Team
        /// </summary>
        /// <remarks>Register Team and its members in the Trivia contest</remarks>
        /// <param name="roster">Team members participating in the Trivia contest</param>
        /// <response code="200"></response>
        /// <response code="400">Invalid parameter value</response>
        [HttpPost]
        [Route("/api/trivia/register")]
        [ValidateModelState]
        [SwaggerOperation("TriviaRegisterTeam")]
        [SwaggerResponse(statusCode: 200, type: typeof(TeamRosterResponseModel), description: "")]
        public virtual IActionResult TriviaRegisterTeam([FromBody]TeamRosterModel roster)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TeamRosterResponseModel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "{\r\n  \"success\" : true,\r\n  \"message\" : \"message\"\r\n}";
            exampleJson = "<null>\n  <success>true</success>\n  <message>aeiou</message>\n</null>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TeamRosterResponseModel>(exampleJson)
            : default(TeamRosterResponseModel);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Search Trivia contest participants
        /// </summary>
        
        /// <param name="k">Keyword to find in Name property</param>
        /// <param name="tid">The Office 365 tenant id</param>
        /// <response code="200"></response>
        [HttpGet]
        [Route("/api/trivia/search")]
        [ValidateModelState]
        [SwaggerOperation("TriviaSearch")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<LeaderboardModel>), description: "")]
        public virtual IActionResult TriviaSearch([FromQuery][Required()]string k, [FromQuery][Required()]string tid)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<LeaderboardModel>));

            string exampleJson = null;
            exampleJson = "[ {\r\n  \"score\" : 0,\r\n  \"achievementBadgeIcon\" : \"achievementBadgeIcon\",\r\n  \"name\" : \"name\",\r\n  \"id\" : \"00000000-0000-0000-0000-000000000000\",\r\n  \"achievementBadge\" : \"achievementBadge\"\r\n}, {\r\n  \"score\" : 0,\r\n  \"achievementBadgeIcon\" : \"achievementBadgeIcon\",\r\n  \"name\" : \"name\",\r\n  \"id\" : \"00000000-0000-0000-0000-000000000000\",\r\n  \"achievementBadge\" : \"achievementBadge\"\r\n} ]";
            exampleJson = "<null>\n  <id>00000000-0000-0000-0000-000000000000</id>\n  <name>aeiou</name>\n  <score>123</score>\n  <achievementBadge>aeiou</achievementBadge>\n  <achievementBadgeIcon>aeiou</achievementBadgeIcon>\n</null>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<LeaderboardModel>>(exampleJson)
            : default(List<LeaderboardModel>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Submit Answer
        /// </summary>
        /// <remarks>Submit answer to trivia question</remarks>
        /// <param name="answer">Trivia answer and supporting data</param>
        /// <response code="200"></response>
        /// <response code="400">Invalid parameter value</response>
        [HttpPost]
        [Route("/api/trivia/answer")]
        [ValidateModelState]
        [SwaggerOperation("TriviaSubmitAnswer")]
        [SwaggerResponse(statusCode: 200, type: typeof(AnswerResponseModel), description: "")]
        public virtual IActionResult TriviaSubmitAnswer([FromBody]AnswerModel answer)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AnswerResponseModel));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "{\r\n  \"achievementBadgeIcon\" : \"achievementBadgeIcon\",\r\n  \"correct\" : true,\r\n  \"achievementBadge\" : \"achievementBadge\"\r\n}";
            exampleJson = "<null>\n  <correct>true</correct>\n  <achievementBadge>aeiou</achievementBadge>\n  <achievementBadgeIcon>aeiou</achievementBadgeIcon>\n</null>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AnswerResponseModel>(exampleJson)
            : default(AnswerResponseModel);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
