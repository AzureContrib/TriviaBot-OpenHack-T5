/*
 * OpenHack
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TriviaAPI.Models
{ 
    /// <summary>
    /// Team Roster for Register API
    /// </summary>
    [DataContract]
    public partial class TeamRosterModel : IEquatable<TeamRosterModel>
    { 
        /// <summary>
        /// Team Id (available in the channelData object of Activity)
        /// </summary>
        /// <value>Team Id (available in the channelData object of Activity)</value>
        [Required]
        [DataMember(Name="teamId")]
        public string TeamId { get; set; }

        /// <summary>
        /// Array of Members (available from GetConversationMembersAsync method)
        /// </summary>
        /// <value>Array of Members (available from GetConversationMembersAsync method)</value>
        [Required]
        [DataMember(Name="members")]
        public List<TeamRosterMemberModel> Members { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamRosterModel {\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TeamRosterModel)obj);
        }

        /// <summary>
        /// Returns true if TeamRosterModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TeamRosterModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamRosterModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TeamId == other.TeamId ||
                    TeamId != null &&
                    TeamId.Equals(other.TeamId)
                ) && 
                (
                    Members == other.Members ||
                    Members != null &&
                    Members.SequenceEqual(other.Members)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TeamId != null)
                    hashCode = hashCode * 59 + TeamId.GetHashCode();
                    if (Members != null)
                    hashCode = hashCode * 59 + Members.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TeamRosterModel left, TeamRosterModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TeamRosterModel left, TeamRosterModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
