/*
 * OpenHack
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TriviaAPI.Models
{ 
    /// <summary>
    /// Result of answer to trivia question
    /// </summary>
    [DataContract]
    public partial class AnswerResponseModel : IEquatable<AnswerResponseModel>
    { 
        /// <summary>
        /// Answer is correct
        /// </summary>
        /// <value>Answer is correct</value>
        [DataMember(Name="correct")]
        public bool? Correct { get; set; }

        /// <summary>
        /// Achievement Badge earned for user
        /// </summary>
        /// <value>Achievement Badge earned for user</value>
        [DataMember(Name="achievementBadge")]
        public string AchievementBadge { get; set; }

        /// <summary>
        /// Gets or Sets AchievementBadgeIcon
        /// </summary>
        [DataMember(Name="achievementBadgeIcon")]
        public string AchievementBadgeIcon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnswerResponseModel {\n");
            sb.Append("  Correct: ").Append(Correct).Append("\n");
            sb.Append("  AchievementBadge: ").Append(AchievementBadge).Append("\n");
            sb.Append("  AchievementBadgeIcon: ").Append(AchievementBadgeIcon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AnswerResponseModel)obj);
        }

        /// <summary>
        /// Returns true if AnswerResponseModel instances are equal
        /// </summary>
        /// <param name="other">Instance of AnswerResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnswerResponseModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Correct == other.Correct ||
                    Correct != null &&
                    Correct.Equals(other.Correct)
                ) && 
                (
                    AchievementBadge == other.AchievementBadge ||
                    AchievementBadge != null &&
                    AchievementBadge.Equals(other.AchievementBadge)
                ) && 
                (
                    AchievementBadgeIcon == other.AchievementBadgeIcon ||
                    AchievementBadgeIcon != null &&
                    AchievementBadgeIcon.Equals(other.AchievementBadgeIcon)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Correct != null)
                    hashCode = hashCode * 59 + Correct.GetHashCode();
                    if (AchievementBadge != null)
                    hashCode = hashCode * 59 + AchievementBadge.GetHashCode();
                    if (AchievementBadgeIcon != null)
                    hashCode = hashCode * 59 + AchievementBadgeIcon.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AnswerResponseModel left, AnswerResponseModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AnswerResponseModel left, AnswerResponseModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
