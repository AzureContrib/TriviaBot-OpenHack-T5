/*
 * OpenHack
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TriviaAPI.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LeaderboardModel : IEquatable<LeaderboardModel>
    { 
        /// <summary>
        /// Object ID from AAD for the user or group
        /// </summary>
        /// <value>Object ID from AAD for the user or group</value>
        [DataMember(Name="id")]
        public Guid? Id { get; set; }

        /// <summary>
        /// Name of Team or Given name and Surname of user
        /// </summary>
        /// <value>Name of Team or Given name and Surname of user</value>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Current score in the Trivia contest
        /// </summary>
        /// <value>Current score in the Trivia contest</value>
        [DataMember(Name="score")]
        public int? Score { get; set; }

        /// <summary>
        /// Gets or Sets AchievementBadge
        /// </summary>
        [DataMember(Name="achievementBadge")]
        public string AchievementBadge { get; set; }

        /// <summary>
        /// Gets or Sets AchievementBadgeIcon
        /// </summary>
        [DataMember(Name="achievementBadgeIcon")]
        public string AchievementBadgeIcon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeaderboardModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  AchievementBadge: ").Append(AchievementBadge).Append("\n");
            sb.Append("  AchievementBadgeIcon: ").Append(AchievementBadgeIcon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LeaderboardModel)obj);
        }

        /// <summary>
        /// Returns true if LeaderboardModel instances are equal
        /// </summary>
        /// <param name="other">Instance of LeaderboardModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaderboardModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Score == other.Score ||
                    Score != null &&
                    Score.Equals(other.Score)
                ) && 
                (
                    AchievementBadge == other.AchievementBadge ||
                    AchievementBadge != null &&
                    AchievementBadge.Equals(other.AchievementBadge)
                ) && 
                (
                    AchievementBadgeIcon == other.AchievementBadgeIcon ||
                    AchievementBadgeIcon != null &&
                    AchievementBadgeIcon.Equals(other.AchievementBadgeIcon)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Score != null)
                    hashCode = hashCode * 59 + Score.GetHashCode();
                    if (AchievementBadge != null)
                    hashCode = hashCode * 59 + AchievementBadge.GetHashCode();
                    if (AchievementBadgeIcon != null)
                    hashCode = hashCode * 59 + AchievementBadgeIcon.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LeaderboardModel left, LeaderboardModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LeaderboardModel left, LeaderboardModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
