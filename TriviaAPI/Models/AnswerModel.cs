/*
 * OpenHack
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TriviaAPI.Models
{ 
    /// <summary>
    /// Answer submitted for the trivia API
    /// </summary>
    [DataContract]
    public partial class AnswerModel : IEquatable<AnswerModel>
    { 
        /// <summary>
        /// Azure AD Object Id for the user submitting the answer
        /// </summary>
        /// <value>Azure AD Object Id for the user submitting the answer</value>
        [Required]
        [DataMember(Name="userId")]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Id of the Question being answered
        /// </summary>
        /// <value>Id of the Question being answered</value>
        [Required]
        [DataMember(Name="questionId")]
        public int? QuestionId { get; set; }

        /// <summary>
        /// Id of the Question Option proposed as the answer
        /// </summary>
        /// <value>Id of the Question Option proposed as the answer</value>
        [Required]
        [DataMember(Name="answerId")]
        public int? AnswerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnswerModel {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  QuestionId: ").Append(QuestionId).Append("\n");
            sb.Append("  AnswerId: ").Append(AnswerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AnswerModel)obj);
        }

        /// <summary>
        /// Returns true if AnswerModel instances are equal
        /// </summary>
        /// <param name="other">Instance of AnswerModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnswerModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    QuestionId == other.QuestionId ||
                    QuestionId != null &&
                    QuestionId.Equals(other.QuestionId)
                ) && 
                (
                    AnswerId == other.AnswerId ||
                    AnswerId != null &&
                    AnswerId.Equals(other.AnswerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (QuestionId != null)
                    hashCode = hashCode * 59 + QuestionId.GetHashCode();
                    if (AnswerId != null)
                    hashCode = hashCode * 59 + AnswerId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AnswerModel left, AnswerModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AnswerModel left, AnswerModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
