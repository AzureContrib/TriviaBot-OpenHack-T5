/*
 * OpenHack
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace TriviaAPI.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TeamsContextModel : IEquatable<TeamsContextModel>
    { 
        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [DataMember(Name="teamId")]
        public string TeamId { get; set; }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name="channelId")]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale")]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [DataMember(Name="theme")]
        public string Theme { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name="entityId")]
        public string EntityId { get; set; }

        /// <summary>
        /// Gets or Sets SubEntityId
        /// </summary>
        [DataMember(Name="subEntityId")]
        public string SubEntityId { get; set; }

        /// <summary>
        /// Gets or Sets Upn
        /// </summary>
        [DataMember(Name="upn")]
        public string Upn { get; set; }

        /// <summary>
        /// Gets or Sets Tid
        /// </summary>
        [DataMember(Name="tid")]
        public Guid? Tid { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="groupId")]
        public Guid? GroupId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamsContextModel {\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  SubEntityId: ").Append(SubEntityId).Append("\n");
            sb.Append("  Upn: ").Append(Upn).Append("\n");
            sb.Append("  Tid: ").Append(Tid).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TeamsContextModel)obj);
        }

        /// <summary>
        /// Returns true if TeamsContextModel instances are equal
        /// </summary>
        /// <param name="other">Instance of TeamsContextModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamsContextModel other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TeamId == other.TeamId ||
                    TeamId != null &&
                    TeamId.Equals(other.TeamId)
                ) && 
                (
                    ChannelId == other.ChannelId ||
                    ChannelId != null &&
                    ChannelId.Equals(other.ChannelId)
                ) && 
                (
                    Locale == other.Locale ||
                    Locale != null &&
                    Locale.Equals(other.Locale)
                ) && 
                (
                    Theme == other.Theme ||
                    Theme != null &&
                    Theme.Equals(other.Theme)
                ) && 
                (
                    EntityId == other.EntityId ||
                    EntityId != null &&
                    EntityId.Equals(other.EntityId)
                ) && 
                (
                    SubEntityId == other.SubEntityId ||
                    SubEntityId != null &&
                    SubEntityId.Equals(other.SubEntityId)
                ) && 
                (
                    Upn == other.Upn ||
                    Upn != null &&
                    Upn.Equals(other.Upn)
                ) && 
                (
                    Tid == other.Tid ||
                    Tid != null &&
                    Tid.Equals(other.Tid)
                ) && 
                (
                    GroupId == other.GroupId ||
                    GroupId != null &&
                    GroupId.Equals(other.GroupId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TeamId != null)
                    hashCode = hashCode * 59 + TeamId.GetHashCode();
                    if (ChannelId != null)
                    hashCode = hashCode * 59 + ChannelId.GetHashCode();
                    if (Locale != null)
                    hashCode = hashCode * 59 + Locale.GetHashCode();
                    if (Theme != null)
                    hashCode = hashCode * 59 + Theme.GetHashCode();
                    if (EntityId != null)
                    hashCode = hashCode * 59 + EntityId.GetHashCode();
                    if (SubEntityId != null)
                    hashCode = hashCode * 59 + SubEntityId.GetHashCode();
                    if (Upn != null)
                    hashCode = hashCode * 59 + Upn.GetHashCode();
                    if (Tid != null)
                    hashCode = hashCode * 59 + Tid.GetHashCode();
                    if (GroupId != null)
                    hashCode = hashCode * 59 + GroupId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TeamsContextModel left, TeamsContextModel right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TeamsContextModel left, TeamsContextModel right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
